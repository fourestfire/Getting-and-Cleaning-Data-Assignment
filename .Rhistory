theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = comma) +
mage (in Thousands, USD)") +
ggtitle("Storm Impact to Economy") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = comma) +
mage (in Thousands, USD)") +
ggtitle("Storm Impact to Economy") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = comma) +
coord_flip()
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
geom_point()
g <- g + geom_point()
g
str(movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
source("http://sna.stanford.edu/setup.R")
install.packages("lattice", repos = "http://cran.cnr.berkeley.edu/",
)
install.packages("lattice", repos = "http://cran.cnr.berkeley.edu/",
)
library(igraph)
rm(data)
rm(df)
rm(testdf())
setwd("C:/Users/dguo019/Desktop/code/R/UCI HAR Dataset")
## load global data sets
features <- read.table("./features.txt")
activity_labels <- read.table("./activity_labels.txt")
## load test data sets
xtest <- read.table("./test/X_test.txt")
ytest <- read.table("./test/Y_test.txt")
subject_test <- read.table("./test/subject_test.txt")
## load training data sets
xtrain <- read.table("./train/X_train.txt")
## load global data sets
features <- read.table("./features.txt")
activity_labels <- read.table("./activity_labels.txt")
## load test data sets
xtest <- read.table("./test/X_test.txt")
ytest <- read.table("./test/Y_test.txt")
subject_test <- read.table("./test/subject_test.txt")
## load training data sets
xtrain <- read.table("./train/X_train.txt")
ytrain <- read.table("./train/Y_train.txt")
subject_train <- read.table("./train/subject_train.txt")
## combine data sets
x <- rbind(xtest, xtrain)
y <- rbind(ytest, ytrain)
subjects <- rbind(subject_test, subject_train)
## set col names based on feature labels
names(x) <- as.character(features$V2)
## delete prior data sets to clear workspace
rm(subject_test,subject_train,xtest,xtrain,ytest,ytrain,features)
head(x)
head(y)
head(activity_label)
head(activity_labels)
activities <- merge(y, activity_labels, "V1")
head(activities)
head(y)
activities2 <- merge(activity_labels, "V1")
head(activities2)
library(dplyr)
act3 <- inner_join(y, activity_labels)
head(act3)
act4 <- left_join(y, activity_labels)
head(act4)
act5 <- semi_join(y, activity_labels)
head(act5)
tail(act5)
rm(act3,act4,act5)
act3 <- inner_join(y, activity_labels)
act4 <- left_join(y, activity_labels)
tail(act3)
tail(act4)
tail(y)
rm(act3,act4)
activities <- inner_join(y, activity_labels)
rm(activities2)
rm(activity_labels)
rm(y)
head(activities)
head(subjects)
?select
x2 <- select(x, contains("mean" | "std"))
x2 <- select(x, contains("mean"), contains("std"))
x2 <- select(x, contains("mean"))
subjects[390]
subjects[390,]
x[390,]
x[404,]
x[390,]-x[404,]
x[390,]
x[404,]
?bind
data <- bind_cols(subjects, activities, x)
head(x)
View(head(x))
View(head(data))
head(activities)
head(subjects)
rename(activities, code = V1, activity = V2)
head(activities)
activities <- rename(activities, code = V1, activity = V2)
head(activities)
subjects <- rename(subjects, subject = V1)
head(subjects)
## bind all data sets together
data <- bind_cols(subjects, activities, x)
head(data)
View(head(data))
x2 <- select(x, subject, activity, contains("mean"), contains("std"))
View(head(data))
x2 <- select(x, subject, activity)
x2 <- select(data, subject, activity, contains("mean"), contains("std"))
data[,400:420]
[1,400:420]
data[1,400:420]
data[1,390:404]
data[1,1:5]
data[1,393:407]
x2 <- select(data, subject, activity, -contains(".1"))
duplicated <- duplicated(colnames(data))
View(duplicated)
?duplicated
?read.table
data <- sub("()","",names(data))
head(data)
data <- bind_cols(subjects, activities, x)
data <- sub("\\()","",names(data))
head(data)
data <- bind_cols(subjects, activities, x)
names(data) <- sub("\\()","",names(data))
head(data)
x2 <- select(data, subject, activity, contains("mean"), contains("std"))
x2 <- select(data, subject, activity, contains("mean-"), contains("std-"))
x2 <- select(data, subject, activity, contains("gravitymean"))
x2 <- select(data, subject, activity)
duplicated <- duplicated(colnames(data))
View(duplicated)
grep <- ("mean", names(data))
grep("mean", names(data))
grep("mean-", names(data))
grep("mean-" | "std-", names(data))
grep("mean- | std-", names(data))
?grep
grep("mean-", names(data), value = TRUE)
stuff <- c("mean-", "std-")
unique (grep(paste(stuff,collapse="|"),
names(data), value=TRUE))
unique (grep(paste(stuff,collapse="|"),
names(data)))
searchfor <- c("mean-", "std-")
unique (grep(paste(searchfor, collapse="|"), names(data)))
unique(grep(paste(searchfor, collapse="|"), names(data)))
columns <- unique(grep(paste(searchfor, collapse="|"), names(data)))
searchfor <- c("mean-", "std-","subject","activity")
columns <- unique(grep(paste(searchfor, collapse="|"), names(data)))
data2 <- data[,columns]
head(data2)
data <- data[,columns]
rm(data2)
rm(subject_test,subject_train,xtest,xtrain,ytest,
ytrain,features,y,activity_labels,subjects,activities,searchfor,columns)
rm(duplicated, stuff)
rm(x)
View(data)
summary(data)
summary(data$subject)
str(data)
as.factor(data$subject)
str(data)
factor(data$subject)
head(data)
str(data)
?unz
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
temp <- tempfile()
download.file(url,temp)
data2 <- read.table(unz(temp, "features.txt"))
unlink(temp)
rm(url, temp)
## load global data sets
features <- read.table("./features.txt")
activity_labels <- read.table("./activity_labels.txt")
## load test data sets
xtest <- read.table("./test/X_test.txt")
ytest <- read.table("./test/Y_test.txt")
subject_test <- read.table("./test/subject_test.txt")
## load training data sets
xtrain <- read.table("./train/X_train.txt")
ytrain <- read.table("./train/Y_train.txt")
subject_train <- read.table("./train/subject_train.txt")
## merges training and test data to create one data set
x <- rbind(xtest, xtrain)
y <- rbind(ytest, ytrain)
subjects <- rbind(subject_test, subject_train)
subjects <- rename(subjects, subject = V1)
## use the descriptive activity names to label the y data set
activities <- inner_join(y, activity_labels)
activities <- rename(activities, code = V1, activity = V2)
## set column names for data set based on feature labels
names(x) <- as.character(features$V2)
## bind all information together into one data set
data <- bind_cols(subjects, activities, x)
## extract only the measurements on the mean and standard deviation (also include the subject and the activity)
## note: was trying to use {dplyr} but did not succeed
## dplyr attempt: data <- select(data, subject, activity, contains("mean-"), contains("std-"))
## this solution subsets columns through indices found using grep
searchfor <- c("\\mean()", "\\std()","subject","activity")
columns <- unique(grep(paste(searchfor, collapse="|"), names(data)))
data <- data[,columns]
head(data)
activities <- inner_join(y, activity_labels)
activities <- rename(activities, code = V1, activity = V2)
## set column names for data set based on feature labels
names(x) <- as.character(features$V2)
## bind all information together into one data set
data <- bind_cols(subjects, activities, x)
## remove invalid () character from column names
names(data) <- sub("\\()","",names(data))
## extract only the measurements on the mean and standard deviation (also include the subject and the activity)
## note: was trying to use {dplyr} but did not succeed
## dplyr attempt: data <- select(data, subject, activity, contains("mean-"), contains("std-"))
## this solution subsets columns through indices found using grep
searchfor <- c("mean", "std","subject","activity")
columns <- unique(grep(paste(searchfor, collapse="|"), names(data)))
data <- data[,columns]
View(data)
data2 <- select(data, -contains("meanFreq")
)
names(data)
names(data)
names(data2)
## remove invalid () character from column names
names(data) <- gsub("\\()","",names(data))
## extract only the measurements on the mean and standard deviation (also include the subject and the activity)
## note: was trying to use {dplyr} but did not succeed
## dplyr attempt: data <- select(data, subject, activity, contains("mean-"), contains("std-"))
## this solution subsets columns through indices found using grep
searchfor <- c("mean", "std","subject","activity")
columns <- unique(grep(paste(searchfor, collapse="|"), names(data)))
data <- data[,columns]
data <- select(data, -contains("meanFreq"))
data3 <- select(data, -contains("mean"))
names(data3)
searchfor <- c("mean", "std","subject","activity")
columns <- unique(grep(paste(searchfor, collapse="|"), names(data)))
data <- data[,columns]
## set column names for data set based on feature labels
names(x) <- as.character(features$V2)
## bind all information together into one data set
data <- bind_cols(subjects, activities, x)
## remove invalid () character from column names
names(data) <- gsub("\\()","",names(data))
## extract only the measurements on the mean and standard deviation (also include the subject and the activity)
## note: was trying to use {dplyr} but did not succeed
## dplyr attempt: data <- select(data, subject, activity, contains("mean-"), contains("std-"))
## this solution subsets columns through indices found using grep
searchfor <- c("mean", "std","subject","activity")
columns <- unique(grep(paste(searchfor, collapse="|"), names(data)))
data <- data[,columns]
data <- select(data, -contains("meanFreq"))
data <- select(data, -contains("std"))
View(data)
names(data)
data <- bind_cols(subjects, activities, x)
## remove invalid () character from column names
names(data) <- gsub("\\()","",names(data))
## extract only the measurements on the mean and standard deviation (also include the subject and the activity)
## note: was trying to use {dplyr} but did not succeed
## dplyr attempt: data <- select(data, subject, activity, contains("mean-"), contains("std-"))
## this solution subsets columns through indices found using grep
searchfor <- c("mean", "std","subject","activity")
columns <- unique(grep(paste(searchfor, collapse="|"), names(data)))
data <- data[,columns]
data <- select(data, -contains("std"))
names(data)
data <- bind_cols(subjects, activities, x)
## remove invalid () character from column names
names(data) <- gsub("\\()","",names(data))
## extract only the measurements on the mean and standard deviation (also include the subject and the activity)
## note: was trying to use {dplyr} but did not succeed
## dplyr attempt: data <- select(data, subject, activity, contains("mean-"), contains("std-"))
## this solution subsets columns through indices found using grep
searchfor <- c("mean", "Mean" "std","subject","activity")
columns <- unique(grep(paste(searchfor, collapse="|"), names(data)))
data <- data[,columns]
data <- bind_cols(subjects, activities, x)
## remove invalid () character from column names
names(data) <- gsub("\\()","",names(data))
## extract only the measurements on the mean and standard deviation (also include the subject and the activity)
## note: was trying to use {dplyr} but did not succeed
## dplyr attempt: data <- select(data, subject, activity, contains("mean-"), contains("std-"))
## this solution subsets columns through indices found using grep
searchfor <- c("mean", "Mean", "std","subject","activity")
columns <- unique(grep(paste(searchfor, collapse="|"), names(data)))
data <- data[,columns]
data <- select(data, -contains("meanFreq"))
data <- select(data, -contains("meanFreq"), -contains("angle"))
data <- bind_cols(subjects, activities, x)
## remove invalid () character from column names
names(data) <- gsub("\\()","",names(data))
## extract only the measurements on the mean and standard deviation (also include the subject and the activity)
## note: was trying to use {dplyr} but did not succeed
## dplyr attempt: data <- select(data, subject, activity, contains("mean-"), contains("std-"))
## this solution subsets columns through indices found using grep
searchfor <- c("mean", "Mean", "std","subject","activity")
columns <- unique(grep(paste(searchfor, collapse="|"), names(data)))
data <- data[,columns]
data <- select(data, -contains("meanFreq"), -contains("angle"))
data3 <- select(data, -contains("mean"))
View(data3)
View(names(data3))
library(tidyr)
data2 <- data
data4 <- data2 %>%
gather(signal_domain, n, -subject, -activity, na.rm = TRUE)
head(data4)
View(head(data))
data4 <- data2 %>%
gather(combinedcols, value, -subject, -activity, na.rm = TRUE)
separate(combinedcols, c("signal_domain", "combinedcols"), 1)
data4 <- data2 %>%
gather(combinedcols, value, -subject, -activity, na.rm = TRUE)
head(data4)
separate(data4, combinedcols, c("signal_domain", "combinedcols"), 1)
data4 <- data2
data4 <- data4 %>%
gather(combinedcols, value, -subject, -activity, na.rm = TRUE)
separate(data4, combinedcols, c("signal_domain", "combinedcols"), 1)
data5 <- separate(data4, combinedcols, c("signal_domain", "combinedcols"), 1)
head(data5)
?separate
data4 <- data2
data4 <- data2 %>%
gather(combinedcols, value, -subject, -activity, na.rm = TRUE) %>%
separate(combinedcols, c("signal_domain", "combinedcols"), 1)
head(data4)
head(data2)
?gsub
data4$combinedcols <- sub("Body","Body_",data4$combinedcols)
head(data4)
data4 <- data4 %>%
separate(combinedcols, c("acceleration_type", "combinedcols"), sep="_")
head(data4)
data4[61800,]
data4$combinedcols <- sub("Gravity","Gravity_",data4$combinedcols)
data4 <- data4 %>%
separate(combinedcols, c("acceleration_type", "combinedcols"), sep="_")
head(data4)
View(data4)
tail(data4)
View(names(data))
?spread
data5 <- spread(data4, combinedcols, value)
data5 <- spread(data4, combinedcols, value, drop=FALSE)
data5 <- spread(data4, combinedcols, value, convert=TRUE)
unique(data4$combinedcols)
data4[3000:3005,]
data5 <- spread(data4, combinedcols, value)
View(names(data5))
data4[2998:3005,]
data5 <- spread(data4, value, combinedcols)
data4[538705,]
data4[569602,]
id <- 1:679734
data4$id <- 1:679734
head(data4)
data5 <- spread(data4, id, value)
data4$id <- NULL
data5 <- spread(data4, combinedcols, value)
spread(data4, combinedcols, value)
data5 <- spread(data4, acceleration_type, value)
str(data4)
str(data2)
spread(pollution, size, amount)
data(pollution)
data5 <- data2 %>%
gather(combinedcols, value, -subject, -activity, na.rm = TRUE) %>%
spread(combinedcols, value)
data5 <- data2 %>%
gather(combinedcols, value, -subject, -activity, na.rm = TRUE) %>%
spread(combinedcols, value, -subject)
data5 <- data2 %>%
gather(combinedcols, value, -subject, -activity, na.rm = TRUE) %>%
spread(combinedcols, value, -subject, -activity)
head(data4)
library(reshape2)
?separate
data5 <- data2 %>%
gather(combinedcols, value, -subject, -activity, na.rm = TRUE)
data6 <- spread(data5, combinedcols, value, -subject, -activity)
data6 <- spread(data5, combinedcols, value)
?dcast
data5 <- dcast(data4, subject + activity + signal_domain + combinedcols ~ variable)
data5 <- dcast(data4, subject + activity + signal_domain + combinedcols ~ value)
data5 <- dcast(data4, subject + activity + signal_domain + acceleration_type + combinedcols ~ value)
wide1 <- tidied <- dcast(narrow, cyl + gear ~ vs, max)
wide1
library(datasets)
data(iris)
data(mtcars)
wide1 <- tidied <- dcast(narrow, cyl + gear ~ vs, max)
wide1
data(mpg)
wide1 <- narrow %>%
group_by(cyl, gear, vs) %>%
summarise(mpg = max(mpg)) %>%
spread(vs, mpg)
group_by(data, activity, subject)
summarize(data, mean)
group_by(data, activity)
summarize(data, mean(activity))
summarize(data, mean(tBodyAcc-mean-X))
summarize(data, mean())
summarize(data, mean(subject))
group_by(data, subject, activity)
summarize_each(data, mean)
summarise_each(data, mean)
summarise_each(data, fun(mean))
summarise_each(data, funs(mean))
data7 <- summarise_each(data, funs(mean))
str(data)
group_by(data, subject, activity)
data7 <- summarise_each(data, funs(mean))
head(data7)
View(data7)
data7 <- data %>%
group_by(subject, activity)
summarise_each(data, funs(mean))
data7 <- data %>%
group_by(subject, activity)
summarise_each(funs(mean))
data7 <- data %>%
group_by(subject, activity) %>%
summarise_each(funs(mean))
head(data7)
data8 <- data7 %>%
gather(combinedcols, value, -subject, -activity, na.rm = TRUE) %>%
separate(combinedcols, c("signal_domain", "combinedcols"), 1)
head(data8)
data8 <- data7 %>%
gather(combinedcols, value, -subject, -activity, na.rm = TRUE) %>%
data9 <- spread(data8, combinedcols, value)
data8 <- data7 %>%
gather(combinedcols, value, -subject, -activity, na.rm = TRUE)
data9 <- spread(data8, combinedcols, value)
data7 <- data %>%
group_by(subject, activity) %>%
summarise_each(funs(mean))
data7 <- data7 %>%
gather(combinedcols, value, -subject, -activity, na.rm = TRUE) %>%
separate(combinedcols, c("signal_domain", "combinedcols"), 1)
## create separator to separate out body vs gravity variables
data7$combinedcols <- sub("Body","Body_",data7$combinedcols)
data7$combinedcols <- sub("Gravity","Gravity_",data7$combinedcols)
## separate out body vs gravity variables
data7 <- data7 %>%
separate(combinedcols, c("acceleration_type", "combinedcols"), sep="_")
data8 <- spread(data4, combinedcols, value)
data8 <- spread(data7, combinedcols, value)
head(data8)
## data was downloaded and unzipped from "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
## load libraries
library(dplyr)
library(tidyr)
## load global data sets
features <- read.table("./features.txt")
activity_labels <- read.table("./activity_labels.txt")
## load test data sets
xtest <- read.table("./test/X_test.txt")
ytest <- read.table("./test/Y_test.txt")
subject_test <- read.table("./test/subject_test.txt")
## load training data sets
xtrain <- read.table("./train/X_train.txt")
ytrain <- read.table("./train/Y_train.txt")
subject_train <- read.table("./train/subject_train.txt")
## merges training and test data to create one data set
x <- rbind(xtest, xtrain)
y <- rbind(ytest, ytrain)
subjects <- rbind(subject_test, subject_train)
subjects <- rename(subjects, subject = V1)
## use the descriptive activity names to label the y data set
activities <- inner_join(y, activity_labels)
activities <- rename(activities, code = V1, activity = V2)
## set column names for data set based on feature labels
names(x) <- as.character(features$V2)
## bind all information together into one data set
data <- bind_cols(subjects, activities, x)
## remove invalid () character from column names
names(data) <- gsub("\\()","",names(data))
## extract only the measurements on the mean and standard deviation (also include the subject and the activity)
## this solution subsets columns through indices found using grep, then extracts further unwanted columns (angle and meanFreq)
searchfor <- c("mean", "Mean", "std","subject","activity")
columns <- unique(grep(paste(searchfor, collapse="|"), names(data)))
data <- data[,columns]
data <- select(data, -contains("meanFreq"), -contains("angle"))
## create summarized data
summary <- data %>%
group_by(subject, activity) %>%
summarise_each(funs(mean))
## delete prior data sets and values to clear workspace
rm(subject_test,subject_train,xtest,xtrain,ytest,
ytrain,features,y,activity_labels,subjects,activities,searchfor,columns,x)
?write.table
write.table(summary, file = "tidyoutput.txt", row.name=FALSE)
